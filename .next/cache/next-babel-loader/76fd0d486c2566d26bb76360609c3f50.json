{"ast":null,"code":"var _jsxFileName = \"/Users/mariapichardo/stackathon/stackathon/components/WorldMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nvar cities = [{\n  name: \"Tokyo\",\n  coordinates: [139.6917, 35.6895],\n  population: 37843000\n}, {\n  name: \"Jakarta\",\n  coordinates: [106.8650, -6.1751],\n  population: 30539000\n}, {\n  name: \"Delhi\",\n  coordinates: [77.1025, 28.7041],\n  population: 24998000\n}, {\n  name: \"Manila\",\n  coordinates: [120.9842, 14.5995],\n  population: 24123000\n}, {\n  name: \"Seoul\",\n  coordinates: [126.9780, 37.5665],\n  population: 23480000\n}, {\n  name: \"Shanghai\",\n  coordinates: [121.4737, 31.2304],\n  population: 23416000\n}, {\n  name: \"Karachi\",\n  coordinates: [67.0099, 24.8615],\n  population: 22123000\n}, {\n  name: \"Beijing\",\n  coordinates: [116.4074, 39.9042],\n  population: 21009000\n}, {\n  name: \"New York\",\n  coordinates: [-74.0059, 40.7128],\n  population: 20630000\n}, {\n  name: \"Guangzhou\",\n  coordinates: [113.2644, 23.1291],\n  population: 20597000\n}, {\n  name: \"Sao Paulo\",\n  coordinates: [-46.6333, -23.5505],\n  population: 20365000\n}, {\n  name: \"Mexico City\",\n  coordinates: [-99.1332, 19.4326],\n  population: 20063000\n}, {\n  name: \"Mumbai\",\n  coordinates: [72.8777, 19.0760],\n  population: 17712000\n}, {\n  name: \"Osaka\",\n  coordinates: [135.5022, 34.6937],\n  population: 17444000\n}, {\n  name: \"Moscow\",\n  coordinates: [37.6173, 55.7558],\n  population: 16170000\n}, {\n  name: \"Dhaka\",\n  coordinates: [90.4125, 23.8103],\n  population: 15669000\n}, {\n  name: \"Greater Cairo\",\n  coordinates: [31.2357, 30.0444],\n  population: 15600000\n}, {\n  name: \"Los Angeles\",\n  coordinates: [-118.2437, 34.0522],\n  population: 15058000\n}, {\n  name: \"Bangkok\",\n  coordinates: [100.5018, 13.7563],\n  population: 14998000\n}, {\n  name: \"Kolkata\",\n  coordinates: [88.3639, 22.5726],\n  population: 14667000\n}, {\n  name: \"Buenos Aires\",\n  coordinates: [-58.3816, -34.6037],\n  population: 14122000\n}, {\n  name: \"Tehran\",\n  coordinates: [51.3890, 35.6892],\n  population: 13532000\n}, {\n  name: \"Istanbul\",\n  coordinates: [28.9784, 41.0082],\n  population: 13287000\n}, {\n  name: \"Lagos\",\n  coordinates: [3.3792, 6.5244],\n  population: 13123000\n}, {\n  name: \"Shenzhen\",\n  coordinates: [114.0579, 22.5431],\n  population: 12084000\n}, {\n  name: \"Rio de Janeiro\",\n  coordinates: [-43.1729, -22.9068],\n  population: 11727000\n}, {\n  name: \"Kinshasa\",\n  coordinates: [15.2663, -4.4419],\n  population: 11587000\n}, {\n  name: \"Tianjin\",\n  coordinates: [117.3616, 39.3434],\n  population: 10920000\n}, {\n  name: \"Paris\",\n  coordinates: [2.3522, 48.8566],\n  population: 10858000\n}, {\n  name: \"Lima\",\n  coordinates: [-77.0428, -12.0464],\n  population: 10750000\n}];\nvar projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nvar WorldMap = function WorldMap() {\n  var _useState = useState([]),\n      geographies = _useState[0],\n      setGeographies = _useState[1];\n\n  useEffect(function () {\n    fetch(\"/world-110m.json\").then(function (response) {\n      if (response.status !== 200) {\n        console.log(\"There was a problem: \".concat(response.status));\n        return;\n      }\n\n      response.json().then(function (worlddata) {\n        setGeographies(feature(worlddata, worlddata.objects.countries).features);\n      });\n    });\n  }, []);\n\n  var handleCountryClick = function handleCountryClick(countryIndex) {\n    console.log(\"Clicked on country: \", geographies[countryIndex]);\n  };\n\n  var handleMarkerClick = function handleMarkerClick(i) {\n    console.log(\"Marker: \", cities[i]);\n  };\n\n  return __jsx(\"svg\", {\n    width: 1600,\n    height: 900,\n    viewBox: \"0 0 800 450\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"g\", {\n    className: \"countries\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, geographies.map(function (d, i) {\n    return __jsx(\"path\", {\n      key: \"path-\".concat(i),\n      d: geoPath().projection(projection)(d),\n      className: \"country\",\n      fill: \"rgba(38,50,56,\".concat(1 / geographies.length * i, \")\"),\n      stroke: \"#FFFFFF\",\n      strokeWidth: 0.5,\n      onClick: function onClick() {\n        return handleCountryClick(i);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n  })), __jsx(\"g\", {\n    className: \"markers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, cities.map(function (city, i) {\n    return __jsx(\"circle\", {\n      key: \"marker-\".concat(i),\n      cx: projection(city.coordinates)[0],\n      cy: projection(city.coordinates)[1],\n      r: city.population / 3000000,\n      fill: \"#E91E63\",\n      stroke: \"#FFFFFF\",\n      className: \"marker\",\n      onClick: function onClick() {\n        return handleMarkerClick(i);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/mariapichardo/stackathon/stackathon/components/WorldMap.js"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","feature","cities","name","coordinates","population","projection","scale","translate","WorldMap","geographies","setGeographies","fetch","then","response","status","console","log","json","worlddata","objects","countries","features","handleCountryClick","countryIndex","handleMarkerClick","i","map","d","length","city"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\n\nconst cities = [\n  { name: \"Tokyo\",          coordinates: [139.6917,35.6895],  population: 37843000 },\n  { name: \"Jakarta\",        coordinates: [106.8650,-6.1751],  population: 30539000 },\n  { name: \"Delhi\",          coordinates: [77.1025,28.7041],   population: 24998000 },\n  { name: \"Manila\",         coordinates: [120.9842,14.5995],  population: 24123000 },\n  { name: \"Seoul\",          coordinates: [126.9780,37.5665],  population: 23480000 },\n  { name: \"Shanghai\",       coordinates: [121.4737,31.2304],  population: 23416000 },\n  { name: \"Karachi\",        coordinates: [67.0099,24.8615],   population: 22123000 },\n  { name: \"Beijing\",        coordinates: [116.4074,39.9042],  population: 21009000 },\n  { name: \"New York\",       coordinates: [-74.0059,40.7128],  population: 20630000 },\n  { name: \"Guangzhou\",      coordinates: [113.2644,23.1291],  population: 20597000 },\n  { name: \"Sao Paulo\",      coordinates: [-46.6333,-23.5505], population: 20365000 },\n  { name: \"Mexico City\",    coordinates: [-99.1332,19.4326],  population: 20063000 },\n  { name: \"Mumbai\",         coordinates: [72.8777,19.0760],   population: 17712000 },\n  { name: \"Osaka\",          coordinates: [135.5022,34.6937],  population: 17444000 },\n  { name: \"Moscow\",         coordinates: [37.6173,55.7558],   population: 16170000 },\n  { name: \"Dhaka\",          coordinates: [90.4125,23.8103],   population: 15669000 },\n  { name: \"Greater Cairo\",  coordinates: [31.2357,30.0444],   population: 15600000 },\n  { name: \"Los Angeles\",    coordinates: [-118.2437,34.0522], population: 15058000 },\n  { name: \"Bangkok\",        coordinates: [100.5018,13.7563],  population: 14998000 },\n  { name: \"Kolkata\",        coordinates: [88.3639,22.5726],   population: 14667000 },\n  { name: \"Buenos Aires\",   coordinates: [-58.3816,-34.6037], population: 14122000 },\n  { name: \"Tehran\",         coordinates: [51.3890,35.6892],   population: 13532000 },\n  { name: \"Istanbul\",       coordinates: [28.9784,41.0082],   population: 13287000 },\n  { name: \"Lagos\",          coordinates: [3.3792,6.5244],     population: 13123000 },\n  { name: \"Shenzhen\",       coordinates: [114.0579,22.5431],  population: 12084000 },\n  { name: \"Rio de Janeiro\", coordinates: [-43.1729,-22.9068], population: 11727000 },\n  { name: \"Kinshasa\",       coordinates: [15.2663,-4.4419],   population: 11587000 },\n  { name: \"Tianjin\",        coordinates: [117.3616,39.3434],  population: 10920000 },\n  { name: \"Paris\",          coordinates: [2.3522,48.8566],    population: 10858000 },\n  { name: \"Lima\",           coordinates: [-77.0428,-12.0464], population: 10750000 },\n]\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\nconst WorldMap = () => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(\"/world-110m.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.countries).features)\n        })\n      })\n  }, [])\n\n  const handleCountryClick = countryIndex => {\n    console.log(\"Clicked on country: \", geographies[countryIndex])\n  }\n\n  const handleMarkerClick = i => {\n    console.log(\"Marker: \", cities[i])\n  }\n\n  return (\n    <svg width={ 1600 } height={ 900 } viewBox=\"0 0 800 450\">\n      <g className=\"countries\">\n        {\n          geographies.map((d,i) => (\n            <path\n              key={ `path-${ i }` }\n              d={ geoPath().projection(projection)(d) }\n              className=\"country\"\n              fill={ `rgba(38,50,56,${ 1 / geographies.length * i})` }\n              stroke=\"#FFFFFF\"\n              strokeWidth={ 0.5 }\n              onClick={ () => handleCountryClick(i) }\n            />\n          ))\n        }\n      </g>\n      <g className=\"markers\">\n        {\n          cities.map((city, i) => (\n            <circle\n              key={ `marker-${i}` }\n              cx={ projection(city.coordinates)[0] }\n              cy={ projection(city.coordinates)[1] }\n              r={ city.population / 3000000 }\n              fill=\"#E91E63\"\n              stroke=\"#FFFFFF\"\n              className=\"marker\"\n              onClick={ () => handleMarkerClick(i) }\n            />\n          ))\n        }\n      </g>\n    </svg>\n  )\n}\n\nexport default WorldMap\n"]},"metadata":{},"sourceType":"module"}
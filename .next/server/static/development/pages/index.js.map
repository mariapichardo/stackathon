{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/WorldMap.js","webpack:///./pages/index.js","webpack:///external \"d3-geo\"","webpack:///external \"react\"","webpack:///external \"topojson-client\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\nimport React, { useState, useEffect } from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport { feature } from \"topojson-client\"\n\nconst cities = [\n  { name: \"Tokyo\",          coordinates: [139.6917,35.6895],  population: 37843000 },\n  { name: \"Jakarta\",        coordinates: [106.8650,-6.1751],  population: 30539000 },\n  { name: \"Delhi\",          coordinates: [77.1025,28.7041],   population: 24998000 },\n  { name: \"Manila\",         coordinates: [120.9842,14.5995],  population: 24123000 },\n  { name: \"Seoul\",          coordinates: [126.9780,37.5665],  population: 23480000 },\n  { name: \"Shanghai\",       coordinates: [121.4737,31.2304],  population: 23416000 },\n  { name: \"Karachi\",        coordinates: [67.0099,24.8615],   population: 22123000 },\n  { name: \"Beijing\",        coordinates: [116.4074,39.9042],  population: 21009000 },\n  { name: \"New York\",       coordinates: [-74.0059,40.7128],  population: 20630000 },\n  { name: \"Guangzhou\",      coordinates: [113.2644,23.1291],  population: 20597000 },\n  { name: \"Sao Paulo\",      coordinates: [-46.6333,-23.5505], population: 20365000 },\n  { name: \"Mexico City\",    coordinates: [-99.1332,19.4326],  population: 20063000 },\n  { name: \"Mumbai\",         coordinates: [72.8777,19.0760],   population: 17712000 },\n  { name: \"Osaka\",          coordinates: [135.5022,34.6937],  population: 17444000 },\n  { name: \"Moscow\",         coordinates: [37.6173,55.7558],   population: 16170000 },\n  { name: \"Dhaka\",          coordinates: [90.4125,23.8103],   population: 15669000 },\n  { name: \"Greater Cairo\",  coordinates: [31.2357,30.0444],   population: 15600000 },\n  { name: \"Los Angeles\",    coordinates: [-118.2437,34.0522], population: 15058000 },\n  { name: \"Bangkok\",        coordinates: [100.5018,13.7563],  population: 14998000 },\n  { name: \"Kolkata\",        coordinates: [88.3639,22.5726],   population: 14667000 },\n  { name: \"Buenos Aires\",   coordinates: [-58.3816,-34.6037], population: 14122000 },\n  { name: \"Tehran\",         coordinates: [51.3890,35.6892],   population: 13532000 },\n  { name: \"Istanbul\",       coordinates: [28.9784,41.0082],   population: 13287000 },\n  { name: \"Lagos\",          coordinates: [3.3792,6.5244],     population: 13123000 },\n  { name: \"Shenzhen\",       coordinates: [114.0579,22.5431],  population: 12084000 },\n  { name: \"Rio de Janeiro\", coordinates: [-43.1729,-22.9068], population: 11727000 },\n  { name: \"Kinshasa\",       coordinates: [15.2663,-4.4419],   population: 11587000 },\n  { name: \"Tianjin\",        coordinates: [117.3616,39.3434],  population: 10920000 },\n  { name: \"Paris\",          coordinates: [2.3522,48.8566],    population: 10858000 },\n  { name: \"Lima\",           coordinates: [-77.0428,-12.0464], population: 10750000 },\n]\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([ 800 / 2, 450 / 2 ])\n\nconst WorldMap = () => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(\"/world-110m.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.countries).features)\n        })\n      })\n  }, [])\n\n  const handleCountryClick = countryIndex => {\n    console.log(\"Clicked on country: \", geographies[countryIndex])\n  }\n\n  const handleMarkerClick = i => {\n    console.log(\"Marker: \", cities[i])\n  }\n\n  return (\n    <svg width={ 800 } height={ 450 } viewBox=\"0 0 800 450\">\n      <g className=\"countries\">\n        {\n          geographies.map((d,i) => (\n            <path\n              key={ `path-${ i }` }\n              d={ geoPath().projection(projection)(d) }\n              className=\"country\"\n              fill={ `rgba(38,50,56,${ 1 / geographies.length * i})` }\n              stroke=\"#FFFFFF\"\n              strokeWidth={ 0.5 }\n              onClick={ () => handleCountryClick(i) }\n            />\n          ))\n        }\n      </g>\n      <g className=\"markers\">\n        {\n          cities.map((city, i) => (\n            <circle\n              key={ `marker-${i}` }\n              cx={ projection(city.coordinates)[0] }\n              cy={ projection(city.coordinates)[1] }\n              r={ city.population / 3000000 }\n              fill=\"#E91E63\"\n              stroke=\"#FFFFFF\"\n              className=\"marker\"\n              onClick={ () => handleMarkerClick(i) }\n            />\n          ))\n        }\n      </g>\n    </svg>\n  )\n}\n\nexport default WorldMap\n","\nimport React from \"react\"\n\nimport WorldMap from \"../components/WorldMap\"\n\nconst Page = () => {\n  return (\n    <WorldMap />\n  )\n}\n\nexport default Page\n","module.exports = require(\"d3-geo\");","module.exports = require(\"react\");","module.exports = require(\"topojson-client\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACveA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}